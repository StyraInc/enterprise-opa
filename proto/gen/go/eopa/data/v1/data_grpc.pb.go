// Copyright 2023 Styra, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eopa/data/v1/data.proto

package datav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataService_CreateData_FullMethodName      = "/eopa.data.v1.DataService/CreateData"
	DataService_GetData_FullMethodName         = "/eopa.data.v1.DataService/GetData"
	DataService_UpdateData_FullMethodName      = "/eopa.data.v1.DataService/UpdateData"
	DataService_DeleteData_FullMethodName      = "/eopa.data.v1.DataService/DeleteData"
	DataService_StreamingDataRW_FullMethodName = "/eopa.data.v1.DataService/StreamingDataRW"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// CreateData looks up the document by path, and inserts a new JSON value
	// at the end of the path.
	//
	// This is equivalent in functionality to OPA's
	// [Data REST API Create/Overwrite method](https://www.openpolicyagent.org/docs/latest/rest-api/#create-or-overwrite-a-document).
	CreateData(ctx context.Context, in *CreateDataRequest, opts ...grpc.CallOption) (*CreateDataResponse, error)
	// GetData looks up the document by path. This can be either a plain JSON
	// value (a "Base" document in OPA parlance), or a rule head (a
	// "Virtual"/computed document).
	//
	// This is equivalent in functionality to OPA's
	// [Data REST API Get with Input method](https://www.openpolicyagent.org/docs/latest/rest-api/#get-a-document-with-input).
	//
	// Note that the input field should not be wrapped with
	// `{ "input": <value> }`, you can simply put the JSON serialized `<value>`
	// in the input field directly.
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	// UpdateData looks up the document by path, and then attempts to perform
	// one of three patching operations at that location: add, remove, or
	// replace.
	//
	// This is roughly equivalent in functionality to OPA's
	// [Data REST API Patch method](https://www.openpolicyagent.org/docs/latest/rest-api/#patch-a-document)
	UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*UpdateDataResponse, error)
	// DeleteData looks up the document by path, and then attempts to remove
	// it from the store.
	//
	// This is equivalent in functionality to OPA's
	// [Data REST API Delete method](https://www.openpolicyagent.org/docs/latest/rest-api/#delete-a-document).
	DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error)
	// StreamingDataRW specifies a stream of fixed-structure, batched
	// read/write operations.
	//
	// WriteData operations are executed sequentially, aborting the entire
	// gRPC call if any operations fail.
	//
	// The ReadData operations are then executed in parallel, but will report
	// errors inline in their responses, instead of aborting the entire gRPC
	// call.
	StreamingDataRW(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingDataRWRequest, StreamingDataRWResponse], error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) CreateData(ctx context.Context, in *CreateDataRequest, opts ...grpc.CallOption) (*CreateDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDataResponse)
	err := c.cc.Invoke(ctx, DataService_CreateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, DataService_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*UpdateDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDataResponse)
	err := c.cc.Invoke(ctx, DataService_UpdateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDataResponse)
	err := c.cc.Invoke(ctx, DataService_DeleteData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) StreamingDataRW(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingDataRWRequest, StreamingDataRWResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], DataService_StreamingDataRW_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingDataRWRequest, StreamingDataRWResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_StreamingDataRWClient = grpc.BidiStreamingClient[StreamingDataRWRequest, StreamingDataRWResponse]

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility.
type DataServiceServer interface {
	// CreateData looks up the document by path, and inserts a new JSON value
	// at the end of the path.
	//
	// This is equivalent in functionality to OPA's
	// [Data REST API Create/Overwrite method](https://www.openpolicyagent.org/docs/latest/rest-api/#create-or-overwrite-a-document).
	CreateData(context.Context, *CreateDataRequest) (*CreateDataResponse, error)
	// GetData looks up the document by path. This can be either a plain JSON
	// value (a "Base" document in OPA parlance), or a rule head (a
	// "Virtual"/computed document).
	//
	// This is equivalent in functionality to OPA's
	// [Data REST API Get with Input method](https://www.openpolicyagent.org/docs/latest/rest-api/#get-a-document-with-input).
	//
	// Note that the input field should not be wrapped with
	// `{ "input": <value> }`, you can simply put the JSON serialized `<value>`
	// in the input field directly.
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	// UpdateData looks up the document by path, and then attempts to perform
	// one of three patching operations at that location: add, remove, or
	// replace.
	//
	// This is roughly equivalent in functionality to OPA's
	// [Data REST API Patch method](https://www.openpolicyagent.org/docs/latest/rest-api/#patch-a-document)
	UpdateData(context.Context, *UpdateDataRequest) (*UpdateDataResponse, error)
	// DeleteData looks up the document by path, and then attempts to remove
	// it from the store.
	//
	// This is equivalent in functionality to OPA's
	// [Data REST API Delete method](https://www.openpolicyagent.org/docs/latest/rest-api/#delete-a-document).
	DeleteData(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error)
	// StreamingDataRW specifies a stream of fixed-structure, batched
	// read/write operations.
	//
	// WriteData operations are executed sequentially, aborting the entire
	// gRPC call if any operations fail.
	//
	// The ReadData operations are then executed in parallel, but will report
	// errors inline in their responses, instead of aborting the entire gRPC
	// call.
	StreamingDataRW(grpc.BidiStreamingServer[StreamingDataRWRequest, StreamingDataRWResponse]) error
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServiceServer struct{}

func (UnimplementedDataServiceServer) CreateData(context.Context, *CreateDataRequest) (*CreateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateData not implemented")
}
func (UnimplementedDataServiceServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedDataServiceServer) UpdateData(context.Context, *UpdateDataRequest) (*UpdateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedDataServiceServer) DeleteData(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedDataServiceServer) StreamingDataRW(grpc.BidiStreamingServer[StreamingDataRWRequest, StreamingDataRWResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingDataRW not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}
func (UnimplementedDataServiceServer) testEmbeddedByValue()                     {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_CreateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CreateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateData(ctx, req.(*CreateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UpdateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateData(ctx, req.(*UpdateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteData(ctx, req.(*DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_StreamingDataRW_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).StreamingDataRW(&grpc.GenericServerStream[StreamingDataRWRequest, StreamingDataRWResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_StreamingDataRWServer = grpc.BidiStreamingServer[StreamingDataRWRequest, StreamingDataRWResponse]

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eopa.data.v1.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateData",
			Handler:    _DataService_CreateData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _DataService_GetData_Handler,
		},
		{
			MethodName: "UpdateData",
			Handler:    _DataService_UpdateData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _DataService_DeleteData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingDataRW",
			Handler:       _DataService_StreamingDataRW_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "eopa/data/v1/data.proto",
}
